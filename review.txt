- In app/models/scorecard.rb

- self.get would be more idiomatic as ‘find_or_create_by_exercise_id_and_user_id’, verbose as it is. In fact Rails might give you that anyway.



In app/models/user.rb

- self.make is weird. It would be more idiomatic to use User.new, then have before_save hooks to pick a random exercise if one is not set.

- no_scores? could use some of Ruby’s very handy array methods, like !scorecards.any?{|scorecard| scorecard.score4 || scorecard.score60.. } which will return true if any item in the array returns true.

- The whole “#{timeframe}_exercise” thing is a code smell, and 9/10 it turns out a better idea to normalise it into a relationship.



For your routes, have a look at ‘resources :exercise’ kinda thing, and restful routes.

Doesn’t look like your controllers use strong_parameters? I’d recommend it.


- Your ScorecardsController update action isn’t secure: I have to be logged in, but I can still change any scorecard. There’s no check it belongs to me. Same with reset.


- UsersController show doesn’t check you’re who you claim to be.

- I’d call user.daily_scorecard in a model lifecycle hook (e.g. after_save if: :something_changed?) rather than in the controller.

- assign_new_daily, assign_new_weekly and assign_new_monthly are a code smell, can’t we pass the time period in as a param? Or at least refactor that code to reduce repetition.

- Yay strong params in users_controller!

- Not sure using cookie_store and storing the logged in user in the session is secure. Would need to Google it. I usually use a gem for auth, like devise.
